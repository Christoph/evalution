#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TheNewEngine.Datalayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class Db : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBinaryAnswer(BinaryAnswer instance);
    partial void UpdateBinaryAnswer(BinaryAnswer instance);
    partial void DeleteBinaryAnswer(BinaryAnswer instance);
    partial void InsertForm(Form instance);
    partial void UpdateForm(Form instance);
    partial void DeleteForm(Form instance);
    partial void InsertGradeAnswer(GradeAnswer instance);
    partial void UpdateGradeAnswer(GradeAnswer instance);
    partial void DeleteGradeAnswer(GradeAnswer instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertQuestionStage(QuestionStage instance);
    partial void UpdateQuestionStage(QuestionStage instance);
    partial void DeleteQuestionStage(QuestionStage instance);
    partial void InsertTextAnswer(TextAnswer instance);
    partial void UpdateTextAnswer(TextAnswer instance);
    partial void DeleteTextAnswer(TextAnswer instance);
    #endregion
		
		public Db(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Db(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Db(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Db(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BinaryAnswer> BinaryAnswer
		{
			get
			{
				return this.GetTable<BinaryAnswer>();
			}
		}
		
		public System.Data.Linq.Table<Form> Form
		{
			get
			{
				return this.GetTable<Form>();
			}
		}
		
		public System.Data.Linq.Table<GradeAnswer> GradeAnswer
		{
			get
			{
				return this.GetTable<GradeAnswer>();
			}
		}
		
		public System.Data.Linq.Table<Question> Question
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<QuestionStage> QuestionStage
		{
			get
			{
				return this.GetTable<QuestionStage>();
			}
		}
		
		public System.Data.Linq.Table<TextAnswer> TextAnswer
		{
			get
			{
				return this.GetTable<TextAnswer>();
			}
		}
	}
	
	[Table()]
	public partial class BinaryAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<bool> _Answer;
		
		private int _FormId;
		
		private int _QuestionId;
		
		private EntityRef<Form> _Form;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAnswerChanging(System.Nullable<bool> value);
    partial void OnAnswerChanged();
    partial void OnFormIdChanging(int value);
    partial void OnFormIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    #endregion
		
		public BinaryAnswer()
		{
			this._Form = default(EntityRef<Form>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Answer", DbType="Bit")]
		public System.Nullable<bool> Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_FormId", DbType="Int NOT NULL")]
		public int FormId
		{
			get
			{
				return this._FormId;
			}
			set
			{
				if ((this._FormId != value))
				{
					if (this._Form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormIdChanging(value);
					this.SendPropertyChanging();
					this._FormId = value;
					this.SendPropertyChanged("FormId");
					this.OnFormIdChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionId", DbType="Int NOT NULL")]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[Association(Name="Form_BinaryAnswer", Storage="_Form", ThisKey="FormId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Form Form
		{
			get
			{
				return this._Form.Entity;
			}
			set
			{
				Form previousValue = this._Form.Entity;
				if (((previousValue != value) 
							|| (this._Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Form.Entity = null;
						previousValue.BinaryAnswer.Remove(this);
					}
					this._Form.Entity = value;
					if ((value != null))
					{
						value.BinaryAnswer.Add(this);
						this._FormId = value.Id;
					}
					else
					{
						this._FormId = default(int);
					}
					this.SendPropertyChanged("Form");
				}
			}
		}
		
		[Association(Name="Question_BinaryAnswer", Storage="_Question", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.BinaryAnswer.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.BinaryAnswer.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class Form : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _School;
		
		private string _Email;
		
		private System.Nullable<int> _Age;
		
		private System.Nullable<bool> _Gender;
		
		private System.Nullable<int> _Grade;
		
		private string _Instrument;
		
		private EntitySet<BinaryAnswer> _BinaryAnswer;
		
		private EntitySet<GradeAnswer> _GradeAnswer;
		
		private EntitySet<TextAnswer> _TextAnswer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSchoolChanging(string value);
    partial void OnSchoolChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnGradeChanging(System.Nullable<int> value);
    partial void OnGradeChanged();
    partial void OnInstrumentChanging(string value);
    partial void OnInstrumentChanged();
    #endregion
		
		public Form()
		{
			this._BinaryAnswer = new EntitySet<BinaryAnswer>(new Action<BinaryAnswer>(this.attach_BinaryAnswer), new Action<BinaryAnswer>(this.detach_BinaryAnswer));
			this._GradeAnswer = new EntitySet<GradeAnswer>(new Action<GradeAnswer>(this.attach_GradeAnswer), new Action<GradeAnswer>(this.detach_GradeAnswer));
			this._TextAnswer = new EntitySet<TextAnswer>(new Action<TextAnswer>(this.attach_TextAnswer), new Action<TextAnswer>(this.detach_TextAnswer));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_School", DbType="NVarChar(100)")]
		public string School
		{
			get
			{
				return this._School;
			}
			set
			{
				if ((this._School != value))
				{
					this.OnSchoolChanging(value);
					this.SendPropertyChanging();
					this._School = value;
					this.SendPropertyChanged("School");
					this.OnSchoolChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[Column(Storage="_Grade", DbType="Int")]
		public System.Nullable<int> Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[Column(Storage="_Instrument", DbType="NVarChar(100)")]
		public string Instrument
		{
			get
			{
				return this._Instrument;
			}
			set
			{
				if ((this._Instrument != value))
				{
					this.OnInstrumentChanging(value);
					this.SendPropertyChanging();
					this._Instrument = value;
					this.SendPropertyChanged("Instrument");
					this.OnInstrumentChanged();
				}
			}
		}
		
		[Association(Name="Form_BinaryAnswer", Storage="_BinaryAnswer", ThisKey="Id", OtherKey="FormId")]
		public EntitySet<BinaryAnswer> BinaryAnswer
		{
			get
			{
				return this._BinaryAnswer;
			}
			set
			{
				this._BinaryAnswer.Assign(value);
			}
		}
		
		[Association(Name="Form_GradeAnswer", Storage="_GradeAnswer", ThisKey="Id", OtherKey="FormId")]
		public EntitySet<GradeAnswer> GradeAnswer
		{
			get
			{
				return this._GradeAnswer;
			}
			set
			{
				this._GradeAnswer.Assign(value);
			}
		}
		
		[Association(Name="Form_TextAnswer", Storage="_TextAnswer", ThisKey="Id", OtherKey="FormId")]
		public EntitySet<TextAnswer> TextAnswer
		{
			get
			{
				return this._TextAnswer;
			}
			set
			{
				this._TextAnswer.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BinaryAnswer(BinaryAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Form = this;
		}
		
		private void detach_BinaryAnswer(BinaryAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Form = null;
		}
		
		private void attach_GradeAnswer(GradeAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Form = this;
		}
		
		private void detach_GradeAnswer(GradeAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Form = null;
		}
		
		private void attach_TextAnswer(TextAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Form = this;
		}
		
		private void detach_TextAnswer(TextAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Form = null;
		}
	}
	
	[Table()]
	public partial class GradeAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Grade;
		
		private int _FormId;
		
		private int _QuestionId;
		
		private EntityRef<Form> _Form;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGradeChanging(System.Nullable<int> value);
    partial void OnGradeChanged();
    partial void OnFormIdChanging(int value);
    partial void OnFormIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    #endregion
		
		public GradeAnswer()
		{
			this._Form = default(EntityRef<Form>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Grade", DbType="Int")]
		public System.Nullable<int> Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[Column(Storage="_FormId", DbType="Int NOT NULL")]
		public int FormId
		{
			get
			{
				return this._FormId;
			}
			set
			{
				if ((this._FormId != value))
				{
					if (this._Form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormIdChanging(value);
					this.SendPropertyChanging();
					this._FormId = value;
					this.SendPropertyChanged("FormId");
					this.OnFormIdChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionId", DbType="Int NOT NULL")]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[Association(Name="Form_GradeAnswer", Storage="_Form", ThisKey="FormId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Form Form
		{
			get
			{
				return this._Form.Entity;
			}
			set
			{
				Form previousValue = this._Form.Entity;
				if (((previousValue != value) 
							|| (this._Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Form.Entity = null;
						previousValue.GradeAnswer.Remove(this);
					}
					this._Form.Entity = value;
					if ((value != null))
					{
						value.GradeAnswer.Add(this);
						this._FormId = value.Id;
					}
					else
					{
						this._FormId = default(int);
					}
					this.SendPropertyChanged("Form");
				}
			}
		}
		
		[Association(Name="Question_GradeAnswer", Storage="_Question", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.GradeAnswer.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.GradeAnswer.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private int _AnswerType;
		
		private EntitySet<BinaryAnswer> _BinaryAnswer;
		
		private EntitySet<GradeAnswer> _GradeAnswer;
		
		private EntitySet<QuestionStage> _QuestionStage;
		
		private EntitySet<TextAnswer> _TextAnswer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnAnswerTypeChanging(int value);
    partial void OnAnswerTypeChanged();
    #endregion
		
		public Question()
		{
			this._BinaryAnswer = new EntitySet<BinaryAnswer>(new Action<BinaryAnswer>(this.attach_BinaryAnswer), new Action<BinaryAnswer>(this.detach_BinaryAnswer));
			this._GradeAnswer = new EntitySet<GradeAnswer>(new Action<GradeAnswer>(this.attach_GradeAnswer), new Action<GradeAnswer>(this.detach_GradeAnswer));
			this._QuestionStage = new EntitySet<QuestionStage>(new Action<QuestionStage>(this.attach_QuestionStage), new Action<QuestionStage>(this.detach_QuestionStage));
			this._TextAnswer = new EntitySet<TextAnswer>(new Action<TextAnswer>(this.attach_TextAnswer), new Action<TextAnswer>(this.detach_TextAnswer));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerType", DbType="Int NOT NULL")]
		public int AnswerType
		{
			get
			{
				return this._AnswerType;
			}
			set
			{
				if ((this._AnswerType != value))
				{
					this.OnAnswerTypeChanging(value);
					this.SendPropertyChanging();
					this._AnswerType = value;
					this.SendPropertyChanged("AnswerType");
					this.OnAnswerTypeChanged();
				}
			}
		}
		
		[Association(Name="Question_BinaryAnswer", Storage="_BinaryAnswer", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<BinaryAnswer> BinaryAnswer
		{
			get
			{
				return this._BinaryAnswer;
			}
			set
			{
				this._BinaryAnswer.Assign(value);
			}
		}
		
		[Association(Name="Question_GradeAnswer", Storage="_GradeAnswer", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<GradeAnswer> GradeAnswer
		{
			get
			{
				return this._GradeAnswer;
			}
			set
			{
				this._GradeAnswer.Assign(value);
			}
		}
		
		[Association(Name="Question_QuestionStage", Storage="_QuestionStage", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<QuestionStage> QuestionStage
		{
			get
			{
				return this._QuestionStage;
			}
			set
			{
				this._QuestionStage.Assign(value);
			}
		}
		
		[Association(Name="Question_TextAnswer", Storage="_TextAnswer", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<TextAnswer> TextAnswer
		{
			get
			{
				return this._TextAnswer;
			}
			set
			{
				this._TextAnswer.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BinaryAnswer(BinaryAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_BinaryAnswer(BinaryAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_GradeAnswer(GradeAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_GradeAnswer(GradeAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_QuestionStage(QuestionStage entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_QuestionStage(QuestionStage entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_TextAnswer(TextAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_TextAnswer(TextAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[Table()]
	public partial class QuestionStage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _QuestionId;
		
		private int _StageNumber;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnStageNumberChanging(int value);
    partial void OnStageNumberChanged();
    #endregion
		
		public QuestionStage()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionId", DbType="Int NOT NULL")]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[Column(Storage="_StageNumber", DbType="Int NOT NULL")]
		public int StageNumber
		{
			get
			{
				return this._StageNumber;
			}
			set
			{
				if ((this._StageNumber != value))
				{
					this.OnStageNumberChanging(value);
					this.SendPropertyChanging();
					this._StageNumber = value;
					this.SendPropertyChanged("StageNumber");
					this.OnStageNumberChanged();
				}
			}
		}
		
		[Association(Name="Question_QuestionStage", Storage="_Question", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.QuestionStage.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.QuestionStage.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class TextAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private int _FormId;
		
		private int _QuestionId;
		
		private EntityRef<Form> _Form;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnFormIdChanging(int value);
    partial void OnFormIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    #endregion
		
		public TextAnswer()
		{
			this._Form = default(EntityRef<Form>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(200)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_FormId", DbType="Int NOT NULL")]
		public int FormId
		{
			get
			{
				return this._FormId;
			}
			set
			{
				if ((this._FormId != value))
				{
					if (this._Form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormIdChanging(value);
					this.SendPropertyChanging();
					this._FormId = value;
					this.SendPropertyChanged("FormId");
					this.OnFormIdChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionId", DbType="Int NOT NULL")]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[Association(Name="Form_TextAnswer", Storage="_Form", ThisKey="FormId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Form Form
		{
			get
			{
				return this._Form.Entity;
			}
			set
			{
				Form previousValue = this._Form.Entity;
				if (((previousValue != value) 
							|| (this._Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Form.Entity = null;
						previousValue.TextAnswer.Remove(this);
					}
					this._Form.Entity = value;
					if ((value != null))
					{
						value.TextAnswer.Add(this);
						this._FormId = value.Id;
					}
					else
					{
						this._FormId = default(int);
					}
					this.SendPropertyChanged("Form");
				}
			}
		}
		
		[Association(Name="Question_TextAnswer", Storage="_Question", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.TextAnswer.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.TextAnswer.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
